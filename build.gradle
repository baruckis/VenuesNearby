/*
 * Copyright 2019 Andrius Baruckis www.baruckis.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext {

        gradle_version = '3.5.3'
        kotlin_version = '1.3.61'

        android_min_sdk_version = 23
        android_target_sdk_version = 29
        android_compile_sdk_version = 29
        android_build_tools_version = "29.0.2"

        // Libraries
        // Adds support for the Action Bar user interface design pattern.
        app_compat_version = '1.1.0'
        // ViewGroup which allows you to position and size widgets in a flexible way.
        constraint_layout_version = '1.1.3'
        espresso_version = '3.2.0'
        // Fully static, compile-time dependency injection framework for both Java and Android.
        dagger_version = '2.25.3'
        javax_annotation_version = '1.3.2'  // Common Annotations for the JavaTM Platform API.
        javax_inject_version = '1'          // The Javax Inject API.
        lifecycle_version = '2.1.0'
        // An HTTP & HTTP/2 client for Android and Java applications.
        okhttp_version = '4.2.2'
        retrofit_version = '2.7.0'          // HTTP client Retrofit.

        room_version = '2.2.3'              // Room is a database object mapping library.
        // Flexible view for providing a limited window into a large data set.
        recyclerview_version = '1.1.0'
        rx_android_version = '2.1.1'        // Reactive extensions for Android.
        rx_java_version = '2.2.16'           // RxJava.
        rx_kotlin_version = '2.4.0'         // RxKotlin.
        // Facebook's Stetho project enables you to use Chrome debugging tools to troubleshoot
        // network traffic, database files, and view layouts.
        stetho_version = '1.5.1'

        // Testing
        arch_testing = '2.1.0'
        mockito_version = '3.2.4'
        mockito_android_version = '3.2.4'
        // Robolectric is the industry-standard unit testing framework for Android.
        robolectric_version = '4.3.1'
        // The AndroidX Test Library provides an extensive framework for testing Android apps.
        test_core_version = '1.2.0'
        test_rules_version = '1.2.0'        // Android testing library's rules.
        test_runner_version = '1.2.0'       // Android testing library's runner.


        domainDependencies = [
                javaxInject: "javax.inject:javax.inject:${javax_inject_version}",
                kotlin     : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
                rxJava     : "io.reactivex.rxjava2:rxjava:${rx_java_version}",
                rxKotlin   : "io.reactivex.rxjava2:rxkotlin:${rx_kotlin_version}"
        ]

        domainTestDependencies = [
                kotlinJUnit  : "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
                mockito      : "org.mockito:mockito-core:${mockito_version}"
        ]

        dataDependencies = [
                javaxInject: "javax.inject:javax.inject:${javax_inject_version}",
                kotlin     : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
                rxKotlin   : "io.reactivex.rxjava2:rxkotlin:${rx_kotlin_version}"
        ]

        dataTestDependencies = [
                kotlinJUnit  : "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
                mockito      : "org.mockito:mockito-core:${mockito_version}"
        ]

        remoteDependencies = [
                javaxInject      : "javax.inject:javax.inject:${javax_inject_version}",
                kotlin           : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
                okHttp           : "com.squareup.okhttp3:okhttp:${okhttp_version}",
                okHttpLogger     : "com.squareup.okhttp3:logging-interceptor:${okhttp_version}",
                rxKotlin         : "io.reactivex.rxjava2:rxkotlin:${rx_kotlin_version}",
                retrofit         : "com.squareup.retrofit2:retrofit:${retrofit_version}",
                retrofitAdapter  : "com.squareup.retrofit2:adapter-rxjava2:${retrofit_version}",
                retrofitConverter: "com.squareup.retrofit2:converter-gson:${retrofit_version}"
        ]

        remoteTestDependencies = [
                kotlinJUnit  : "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
                mockito      : "org.mockito:mockito-core:${mockito_version}"
        ]

        cacheDependencies = [
                javaxInject : "javax.inject:javax.inject:${javax_inject_version}",
                kotlin      : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
                roomCompiler: "androidx.room:room-compiler:${room_version}",
                roomRuntime : "androidx.room:room-runtime:${room_version}",
                roomRxJava  : "androidx.room:room-rxjava2:${room_version}",
                rxKotlin    : "io.reactivex.rxjava2:rxkotlin:${rx_kotlin_version}"
        ]

        cacheTestDependencies = [
                archTesting  : "androidx.arch.core:core-testing:${arch_testing}",
                kotlinJUnit  : "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
                mockito      : "org.mockito:mockito-core:${mockito_version}",
                robolectric  : "org.robolectric:robolectric:${robolectric_version}",
                roomTesting  : "androidx.room:room-testing:${room_version}",
                testCore     : "androidx.test:core:${test_core_version}",
        ]

        presentationDependencies = [
                javaxInject        : "javax.inject:javax.inject:${javax_inject_version}",
                kotlin             : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
                lifecycleCompiler  : "androidx.lifecycle:lifecycle-compiler:${lifecycle_version}",
                lifecycleExtensions: "androidx.lifecycle:lifecycle-extensions:${lifecycle_version}",
                rxKotlin           : "io.reactivex.rxjava2:rxkotlin:${rx_kotlin_version}"
        ]

        presentationTestDependencies = [
                archTesting  : "androidx.arch.core:core-testing:${arch_testing}",
                kotlinJUnit  : "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
                mockito      : "org.mockito:mockito-core:${mockito_version}",
                robolectric  : "org.robolectric:robolectric:${robolectric_version}"
        ]

        uiDependencies = [
                appCompat          : "androidx.appcompat:appcompat:${app_compat_version}",
                constraintLayout   : "androidx.constraintlayout:constraintlayout:${constraint_layout_version}",
                dagger             : "com.google.dagger:dagger:${dagger_version}",
                daggerCompiler     : "com.google.dagger:dagger-compiler:${dagger_version}",
                daggerProcessor    : "com.google.dagger:dagger-android-processor:${dagger_version}",
                daggerSupport      : "com.google.dagger:dagger-android-support:${dagger_version}",
                javaxInject        : "javax.inject:javax.inject:${javax_inject_version}",
                kotlin             : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
                lifecycleCompiler  : "androidx.lifecycle:lifecycle-compiler:${lifecycle_version}",
                lifecycleExtensions: "androidx.lifecycle:lifecycle-extensions:${lifecycle_version}",
                recyclerView       : "androidx.recyclerview:recyclerview:${recyclerview_version}",
                rxAndroid          : "io.reactivex.rxjava2:rxandroid:${rx_android_version}",
                rxKotlin           : "io.reactivex.rxjava2:rxkotlin:${rx_kotlin_version}",
                stetho             : "com.facebook.stetho:stetho:${stetho_version}"
        ]

        uiTestDependencies = [
                dagger             : "com.google.dagger:dagger:${dagger_version}",
                daggerCompiler     : "com.google.dagger:dagger-compiler:${dagger_version}",
                daggerProcessor    : "com.google.dagger:dagger-android-processor:${dagger_version}",
                daggerSupport      : "com.google.dagger:dagger-android-support:${dagger_version}",
                espresso           : "androidx.test.espresso:espresso-core:${espresso_version}",
                espressoContrib    : "androidx.test.espresso:espresso-contrib:${espresso_version}",
                kotlinJUnit        : "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
                mockito            : "org.mockito:mockito-core:${mockito_version}",
                mockitoAndroid     : "org.mockito:mockito-android:${mockito_android_version}",
                testCore           : "androidx.test:core:${test_core_version}",
                testRules          : "androidx.test:rules:${test_rules_version}",
                testRunner         : "androidx.test:runner:${test_runner_version}"
        ]

    }

    repositories {
        google()
        jcenter()

    }
    dependencies {
        classpath "com.android.tools.build:gradle:$gradle_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}


allprojects {
    repositories {
        google()
        jcenter()

    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
